# This workflow builds and pushes a Docker container to Google Artifact Registry
# and deploys it on Cloud Run when a commit is pushed to the "main" branch.
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a Docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub
#    (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted:
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles.
#
# 4. Create GitHub secrets for GCP_CREDENTIALS, GAR_LOCATION, SERVICE, and REGION.
#
# 5. Change the values for the PROJECT_ID environment variable.
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io.
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run.
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege
#---
name: Build and Push Python Image to Google Cloud Platform

on:
  push:
    branches:
      - main

jobs:
  build-push-gcr:
    name: Build and Push to GCP
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: apieduconline
      PROJECT_ID: astral-option-412114

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Build Docker Image
      run: |
        docker build -t $IMAGE_NAME:latest .
        if [ $? -ne 0 ]; then
          echo "Failed to build Docker image. Exiting..."
          exit 1
        fi

    - name: Configure Docker Client
      run: gcloud auth configure-docker --quiet

    - name: Push Docker Image to Container Registry (GCR)
      run: |
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
        if [ $? -ne 0 ]; then
          echo "Failed to push Docker image to GCR. Exiting..."
          exit 1
        fi


    # - name: Push Docker Image to Artifact Registry
     # env:
      #  GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
     # run: |-
        #docker tag $IMAGE_NAME:latest europe-west9.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
        #docker tag $IMAGE_NAME:latest europe-west9.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG
       # docker push europe-west9.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
       # docker push europe-west9.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG
